<?php

namespace Tests\Unit\Inventory\Infrastructure\Webhooks\Listeners;

use App\Inventory\Domain\InventoryItems\InventoryItemFactory;
use App\Inventory\Domain\InventoryItems\Stock;
use App\Inventory\Domain\Repositories\InventoryItemRepositoryInterface;
use App\Inventory\Domain\Repositories\SupplierRepositoryInterface;
use App\Inventory\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionInventoryItemRepository;
use App\Inventory\Infrastructure\Persistence\InMemory\Repositories\InMemoryCollectionSupplierRepository;
use App\Inventory\Infrastructure\Webhooks\Listeners\PicqerAssembledProductStockChangedListener;
use Illuminate\Support\Facades\Log;
use Tests\TestCase;

class PicqerProductsFreeStockChangedListenerTest extends TestCase
{
    protected InMemoryCollectionInventoryItemRepository $inventoryItemRepository;
    protected PicqerAssembledProductStockChangedListener $listener;
    protected array $event;
    protected string $productCode;
    protected int $stock;
    protected InMemoryCollectionSupplierRepository $supplierRepository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->productCode = '5029496400755';
        $this->stock = 99;
        $this->event = [
            'idhook' => 12669,
            'name' => 'Vrije Voorraad Producten Veranderd',
            'event' => 'products.free_stock_changed',
            'event_triggered_at' => '2022-07-11 10:00:51',
            'data' => [
                'idproduct' => 24736806,
                'idvatgroup' => 15157,
                'idsupplier' => 110903,
                'productcode' => $this->productCode,
                'name' => '5 ltr EEM DEEP V2',
                'price' => 134.71,
                'fixedstockprice' => 68.99,
                'productcode_supplier' => NULL,
                'deliverytime' => NULL,
                'description' => NULL,
                'barcode' => '5029496400755',
                'unlimitedstock' => false,
                'assembled' => false,
                'type' => 'normal',
                'weight' => NULL,
                'length' => NULL,
                'width' => NULL,
                'height' => NULL,
                'minimum_purchase_quantity' => 0,
                'purchase_in_quantities_of' => 0,
                'hs_code' => NULL,
                'country_of_origin' => NULL,
                'active' => true,
                'comment_count' => 0,
                'analysis_abc_classification' => NULL,
                'analysis_pick_amount_per_day' => NULL,
                'tags' => [
                    'Synchroniseer Voorraad' => [
                        'idtag' => 138593,
                        'title' => 'Synchroniseer Voorraad',
                        'color' => '#f000f0',
                        'inherit' => false,
                        'textColor' => '#000000',
                    ],
                ],
                'productfields' => [
                ],
                'images' => [
                ],
                'stock' => [
                    0 => [
                        'idwarehouse' => 7397,
                        'stock' => $this->stock,
                        'reserved' => 0,
                        'reservedbackorders' => 0,
                        'reservedpicklists' => 0,
                        'reservedallocations' => 0,
                        'freestock' => $this->stock,
                    ],
                ],
                'pricelists' => [
                ],
            ],
        ];

        $this->inventoryItemRepository = new InMemoryCollectionInventoryItemRepository();
        $this->app->bind(InventoryItemRepositoryInterface::class, function () {return $this->inventoryItemRepository;});

        $this->supplierRepository = new InMemoryCollectionSupplierRepository();
        $this->app->bind(SupplierRepositoryInterface::class, function () {return $this->supplierRepository;});
    }

    /** @test */
    public function it_should_only_update_stock_when_tag_is_specified()
    {
        // Given
        $inventoryItem = InventoryItemFactory::create([
            'productCode' => $this->productCode,
            'stock' => new Stock(0, 0, 0)
        ]);

        $this->inventoryItemRepository->save($inventoryItem);

        $url = route('handle-inventory-webhook', [
            'webhookName' => 'picqer'
        ]);

        // When
        $response = $this->post($url, $this->event);

        // Then
        $response->assertOk();
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($this->productCode);
        self::assertEquals($this->stock, $foundInventoryItem->stock()->free());
    }

    /** @test */
    public function it_should_not_update_stock_when_tag_is_not_specified()
    {
        // Given
        $inventoryItem = InventoryItemFactory::create([
            'productCode' => $this->productCode,
            'stock' => new Stock(0, 0, 0)
        ]);

        $this->inventoryItemRepository->save($inventoryItem);

        $url = route('handle-inventory-webhook', [
            'webhookName' => 'picqer'
        ]);


        $event = $this->event;
        $event['data']['tags'] = [];

        // When
        $response = $this->post($url, $event);

        // Then
        $response->assertOk();
        $foundInventoryItem = $this->inventoryItemRepository->findOneByProductCode($this->productCode);
        self::assertEquals(0, $foundInventoryItem->stock()->free());
    }

    /** @test */
    public function it_should_log_when_inventory_item_not_found()
    {
        // Then
        $this->withoutExceptionHandling();

        Log::shouldReceive('channel')
            ->with('inventory')
            ->once()
            ->andReturnSelf();

        Log::shouldReceive('channel->error')
            ->once()
            ->with('Inventory item with product code ' . $this->productCode . ' not found');

        // Given
        $url = route('handle-inventory-webhook', [
            'webhookName' => 'picqer'
        ]);

        // When
        $response = $this->post($url, $this->event);
    }

    /** @test */
    public function it_should_log_when_there_is_no_stock()
    {
        // Then
        $this->withoutExceptionHandling();

        Log::shouldReceive('channel')
            ->with('inventory')
            ->once()
            ->andReturnSelf();

        Log::shouldReceive('channel->error')
            ->once()
            ->with('There is no stock for product with product code ' . $this->productCode);

        $event = $this->event;
        $event['data']['stock'] = [];

        // Given
        $url = route('handle-inventory-webhook', [
            'webhookName' => 'picqer'
        ]);

        // When
        $response = $this->post($url, $event);
    }

}
